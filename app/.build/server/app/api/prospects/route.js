"use strict";(()=>{var e={};e.id=253,e.ids=[253],e.modules={53524:e=>{e.exports=require("@prisma/client")},72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},27790:e=>{e.exports=require("assert")},78893:e=>{e.exports=require("buffer")},84770:e=>{e.exports=require("crypto")},17702:e=>{e.exports=require("events")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},86624:e=>{e.exports=require("querystring")},17360:e=>{e.exports=require("url")},21764:e=>{e.exports=require("util")},71568:e=>{e.exports=require("zlib")},76526:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>w,patchFetch:()=>q,requestAsyncStorage:()=>h,routeModule:()=>m,serverHooks:()=>g,staticGenerationAsyncStorage:()=>y});var s={};t.r(s),t.d(s,{GET:()=>d,POST:()=>x,dynamic:()=>l});var a=t(49303),o=t(88716),i=t(60670),n=t(87070),p=t(45609),c=t(90455),u=t(9487);let l="force-dynamic";async function d(e){try{if(!await (0,p.getServerSession)(c.L))return n.NextResponse.json({error:"Unauthorized"},{status:401});let e=await u._.prospect.findMany({orderBy:{createdAt:"desc"}});return n.NextResponse.json({prospects:e})}catch(e){return console.error("Error fetching prospects:",e),n.NextResponse.json({error:"Failed to fetch prospects"},{status:500})}}async function x(e){try{let r=await (0,p.getServerSession)(c.L);if(!r)return n.NextResponse.json({error:"Unauthorized"},{status:401});let t=await e.json(),s=await u._.prospect.create({data:{...t,createdBy:r.user?.email||"system"}});return n.NextResponse.json({prospect:s},{status:201})}catch(e){return console.error("Error creating prospect:",e),n.NextResponse.json({error:"Failed to create prospect"},{status:500})}}let m=new a.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/prospects/route",pathname:"/api/prospects",filename:"route",bundlePath:"app/api/prospects/route"},resolvedPagePath:"/home/ubuntu/ccc_healthcare_pipeline/app/app/api/prospects/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:h,staticGenerationAsyncStorage:y,serverHooks:g}=m,w="/api/prospects/route";function q(){return(0,i.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:y})}},90455:(e,r,t)=>{t.d(r,{L:()=>p});var s=t(53797),a=t(13539),o=t(9487),i=t(42023),n=t.n(i);let p={adapter:(0,a.N)(o._),providers:[(0,s.Z)({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)throw Error("Missing credentials");let r=await o._.user.findUnique({where:{email:e.email}});if(!r?.password||!await n().compare(e.password,r.password))throw Error("Invalid credentials");return{id:r.id,email:r.email,name:r.name,role:r.role}}})],session:{strategy:"jwt"},callbacks:{jwt:async({token:e,user:r})=>(r&&(e.role=r.role),e),session:async({session:e,token:r})=>(r&&(e.user.id=r.sub,e.user.role=r.role),e)},pages:{signIn:"/auth/signin"},secret:process.env.NEXTAUTH_SECRET}},9487:(e,r,t)=>{t.d(r,{_:()=>a});var s=t(53524);let a=globalThis.prisma??new s.PrismaClient}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[276,972,23,184],()=>t(76526));module.exports=s})();
"use strict";(()=>{var e={};e.id=654,e.ids=[654],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},84770:e=>{e.exports=require("crypto")},98167:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>f,patchFetch:()=>v,requestAsyncStorage:()=>m,routeModule:()=>h,serverHooks:()=>x,staticGenerationAsyncStorage:()=>g});var s={};t.r(s),t.d(s,{POST:()=>d,dynamic:()=>l});var a=t(49303),i=t(88716),n=t(60670),u=t(87070),o=t(42023),p=t.n(o),c=t(9487);let l="force-dynamic";async function d(e){try{let{name:r,email:t,password:s}=await e.json();if(!r||!t||!s)return u.NextResponse.json({error:"Missing required fields"},{status:400});if(await c._.user.findUnique({where:{email:t}}))return u.NextResponse.json({error:"User already exists"},{status:400});let a=await p().hash(s,12),i=await c._.user.create({data:{name:r,email:t,password:a,role:"USER"},select:{id:!0,name:!0,email:!0,role:!0,createdAt:!0}});return u.NextResponse.json({success:!0,message:"User created successfully",user:i})}catch(e){return console.error("Signup error:",e),u.NextResponse.json({error:"Internal server error"},{status:500})}}let h=new a.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/auth/signup/route",pathname:"/api/auth/signup",filename:"route",bundlePath:"app/api/auth/signup/route"},resolvedPagePath:"/home/ubuntu/ccc_healthcare_pipeline/app/app/api/auth/signup/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:m,staticGenerationAsyncStorage:g,serverHooks:x}=h,f="/api/auth/signup/route";function v(){return(0,n.patchFetch)({serverHooks:x,staticGenerationAsyncStorage:g})}},9487:(e,r,t)=>{t.d(r,{_:()=>a});var s=t(53524);let a=globalThis.prisma??new s.PrismaClient}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[276,972,23],()=>t(98167));module.exports=s})();
// PipelinePro OS - Multi-Industry Prospect Pipeline Schema
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/ccc_healthcare_pipeline/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Authentication and User Management
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Extended Profile Information
  firstName     String?
  lastName      String?
  jobTitle      String?
  company       String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  website       String?
  profileSetupComplete Boolean @default(false)

  // API Configuration
  apifyApiKey   String?   // Encrypted Apify API key for user-specific data scraping
  apifyKeyLastTested DateTime? // Last time the API key was tested
  apifyKeyStatus ApiKeyStatus @default(NOT_CONFIGURED) // Status of the API key

  // Relationships
  prospects              Prospect[]
  outreachActivities     OutreachActivity[]
  qualifications         Qualification[]
  documents              Document[]
  submissions            Submission[]
  createdEmailTemplates  EmailTemplate[]
  analyticsTracking      AnalyticsEvent[]
  searchSessions         SearchSession[]
  bulkOperations         BulkOperation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core Business Entities
model Prospect {
  id                    String            @id @default(cuid())
  businessName          String
  contactName           String?
  email                 String?
  phone                 String?
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  businessType          IndustryType
  industryCategory      IndustryCategory
  monthlyRevenue        Int?              // in dollars
  yearsInBusiness       Float?
  employeeCount         Int?
  website               String?
  status                ProspectStatus    @default(NEW)
  qualificationScore    Int?              @default(0)
  isQualified           Boolean           @default(false)
  notes                 String?           @db.Text
  tags                  String[]          @default([])
  source                String?           // Where prospect was found
  searchSessionId       String?           // Link to search session that found this prospect
  assignedToId          String?
  lastContactDate       DateTime?
  nextFollowUpDate      DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relationships
  assignedTo            User?             @relation(fields: [assignedToId], references: [id])
  searchSession         SearchSession?    @relation("SearchSessionProspects", fields: [searchSessionId], references: [id])
  outreachActivities    OutreachActivity[]
  qualifications        Qualification[]
  documents             Document[]
  submissions           Submission[]
  analyticsEvents       AnalyticsEvent[]
}

model OutreachActivity {
  id              String          @id @default(cuid())
  prospectId      String
  userId          String
  type            OutreachType
  subject         String?
  content         String?         @db.Text
  status          OutreachStatus  @default(PENDING)
  scheduledAt     DateTime?
  completedAt     DateTime?
  response        String?         @db.Text
  responseDate    DateTime?
  emailOpened     Boolean         @default(false)
  emailClicked    Boolean         @default(false)
  linkedInMessage String?         @db.Text
  phoneCallNotes  String?         @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  prospect        Prospect        @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  subject     String
  content     String   @db.Text
  type        String   // initial_contact, follow_up, qualification, etc.
  isActive    Boolean  @default(true)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Qualification {
  id                    String              @id @default(cuid())
  prospectId            String
  userId                String
  totalScore            Int                 @default(0)
  maxScore              Int                 @default(100)
  isComplete            Boolean             @default(false)
  qualificationStatus   QualificationStatus @default(IN_PROGRESS)
  responses             Json                // Store Q&A responses
  completedAt           DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relationships
  prospect              Prospect            @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  user                  User                @relation(fields: [userId], references: [id])
}

model Document {
  id           String           @id @default(cuid())
  prospectId   String
  userId       String
  name         String
  type         DocumentType
  filePath     String
  fileSize     Int?
  mimeType     String?
  status       DocumentStatus   @default(PENDING)
  isRequired   Boolean          @default(false)
  notes        String?
  uploadedAt   DateTime         @default(now())
  reviewedAt   DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relationships
  prospect     Prospect         @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id])
  submissions  SubmissionDocument[]
}

model Submission {
  id                  String               @id @default(cuid())
  prospectId          String
  userId              String
  status              SubmissionStatus     @default(PREPARING)
  submissionType      String               @default("Standard Application")
  submittedToEmail    String               @default("Stella@arffinancial.com")
  ccEmails            String[]             @default(["lclaydon@arffinancial.com"])
  notes               String?              @db.Text
  submittedAt         DateTime?
  responseReceived    Boolean              @default(false)
  responseDate        DateTime?
  responseNotes       String?              @db.Text
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  // Relationships
  prospect            Prospect             @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  user                User                 @relation(fields: [userId], references: [id])
  documents           SubmissionDocument[]
}

model SubmissionDocument {
  id           String     @id @default(cuid())
  submissionId String
  documentId   String
  createdAt    DateTime   @default(now())

  // Relationships
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  document     Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([submissionId, documentId])
}

model AnalyticsEvent {
  id         String    @id @default(cuid())
  prospectId String?
  userId     String
  eventType  String    // conversion, stage_change, email_open, etc.
  eventData  Json?     // Additional event metadata
  value      Float?    // For ROI calculations
  createdAt  DateTime  @default(now())

  // Relationships
  prospect   Prospect? @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id])
}

// Industry Configuration Models
model IndustryConfig {
  id                    String            @id @default(cuid())
  industryType          IndustryType      @unique
  industryCategory      IndustryCategory
  displayName           String
  minMonthlyRevenue     Int               // Minimum monthly revenue for qualification
  maxMonthlyRevenue     Int               // Maximum monthly revenue range
  minYearsInBusiness    Float             // Minimum years in business
  searchTerms           String[]          // Keywords for prospect search
  qualifyingQuestions   Json              // Industry-specific qualifying questions
  valueProposition      String            @db.Text
  seasonalPatterns      Json?             // Peak/slow seasons
  crossSellOpportunities String[]         @default([])
  averageLoanSize       Int?
  conversionRate        Float?            // Industry average conversion rate
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model SearchSession {
  id                    String       @id @default(cuid())
  userId                String
  searchQuery           String
  industryFilters       IndustryType[]
  locationFilters       String[]     @default([])
  revenueMin            Int?
  revenueMax            Int?
  resultsCount          Int          @default(0)
  dataSource            String       @default("mixed") // live, mock, mixed
  isCompleted           Boolean      @default(false)
  searchDuration        Int?         // in seconds
  createdAt             DateTime     @default(now())
  
  // Relationships
  user                  User         @relation(fields: [userId], references: [id])
  prospects             Prospect[]   @relation("SearchSessionProspects")
}

model BulkOperation {
  id                    String             @id @default(cuid())
  userId                String
  operationType         BulkOperationType
  targetIndustries      IndustryType[]
  targetLocations       String[]           @default([])
  status                BulkOperationStatus @default(PENDING)
  totalTargets          Int                @default(0)
  completedTargets      Int                @default(0)
  failedTargets         Int                @default(0)
  parameters            Json?              // Operation-specific parameters
  results               Json?              // Operation results
  scheduledAt           DateTime?
  startedAt             DateTime?
  completedAt           DateTime?
  errorMessage          String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  
  // Relationships
  user                  User               @relation(fields: [userId], references: [id])
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum IndustryCategory {
  HEALTHCARE
  RESTAURANT_FOOD_SERVICE
  BEAUTY_WELLNESS
  AUTOMOTIVE_SERVICES
  FITNESS_RECREATION
  PET_SERVICES
  SPECIALTY_RETAIL
  BUSINESS_SERVICES
}

enum IndustryType {
  // Healthcare
  MEDICAL_OFFICE
  DENTAL_PRACTICE
  VETERINARY_CLINIC
  PHYSICAL_THERAPY
  MENTAL_HEALTH
  URGENT_CARE
  MEDICAL_IMAGING
  LABORATORY
  PHARMACY
  SPECIALTY_CLINIC
  CHIROPRACTIC
  OPTOMETRY
  DERMATOLOGY
  
  // Restaurants & Food Service
  FAST_FOOD
  CASUAL_DINING
  FINE_DINING
  COFFEE_SHOP
  BAKERY
  FOOD_TRUCK
  CATERING
  BAR_GRILL
  PIZZA_RESTAURANT
  ETHNIC_CUISINE
  
  // Beauty & Wellness
  HAIR_SALON
  NAIL_SALON
  SPA_WELLNESS
  MASSAGE_THERAPY
  TATTOO_PARLOR
  BARBERSHOP
  BEAUTY_SUPPLY
  COSMETIC_SERVICES
  TANNING_SALON
  
  // Automotive Services
  AUTO_REPAIR
  OIL_CHANGE
  TIRE_SHOP
  CAR_WASH
  AUTO_DETAILING
  TRANSMISSION_REPAIR
  BODY_SHOP
  MUFFLER_SHOP
  BRAKE_SERVICE
  
  // Fitness & Recreation
  GYM_FITNESS
  YOGA_STUDIO
  MARTIAL_ARTS
  DANCE_STUDIO
  PERSONAL_TRAINING
  SPORTS_FACILITY
  RECREATION_CENTER
  CLIMBING_GYM
  
  // Pet Services
  VETERINARY_SERVICES
  PET_GROOMING
  PET_BOARDING
  PET_TRAINING
  PET_DAYCARE
  PET_STORE
  DOG_WALKING
  
  // Specialty Retail
  BOUTIQUE_CLOTHING
  JEWELRY_STORE
  ELECTRONICS_REPAIR
  BIKE_SHOP
  BOOKSTORE
  GIFT_SHOP
  SPORTING_GOODS
  HOME_DECOR
  ANTIQUE_SHOP
  
  // Business Services
  ACCOUNTING_SERVICES
  LEGAL_SERVICES
  MARKETING_AGENCY
  CONSULTING
  REAL_ESTATE
  INSURANCE_AGENCY
  FINANCIAL_PLANNING
  IT_SERVICES
  CLEANING_SERVICES
  LANDSCAPING
  
  OTHER
}

enum ProspectStatus {
  NEW
  CONTACTED
  QUALIFIED
  SUBMITTED
  NURTURING
  CONVERTED
  DEAD
}

enum OutreachType {
  EMAIL
  PHONE
  LINKEDIN
  IN_PERSON
  OTHER
}

enum OutreachStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  RESPONDED
  FAILED
}

enum QualificationStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  QUALIFIED
  DISQUALIFIED
}

enum DocumentType {
  BANK_STATEMENT
  TAX_RETURN
  FINANCIAL_STATEMENT
  BUSINESS_LICENSE
  IDENTIFICATION
  APPLICATION_FORM
  SUPPORTING_DOCUMENT
  OTHER
}

enum DocumentStatus {
  PENDING
  UPLOADED
  REVIEWED
  APPROVED
  REJECTED
  MISSING
}

enum SubmissionStatus {
  PREPARING
  READY
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  ADDITIONAL_INFO_REQUIRED
}

enum ApiKeyStatus {
  NOT_CONFIGURED
  VALID
  INVALID
  EXPIRED
  TESTING
}

enum BulkOperationType {
  BULK_SEARCH
  BULK_OUTREACH
  BULK_QUALIFICATION
  BULK_UPDATE
  BULK_EXPORT
  INDUSTRY_ANALYSIS
}

enum BulkOperationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  PAUSED
}
